// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PaymentAckV3.proto

#ifndef PROTOBUF_PaymentAckV3_2eproto__INCLUDED
#define PROTOBUF_PaymentAckV3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PaymentV3.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace bitcoin {
namespace proto3 {
class PaymentAck;
class PaymentAckDefaultTypeInternal;
extern PaymentAckDefaultTypeInternal _PaymentAck_default_instance_;
}  // namespace proto3
}  // namespace bitcoin
}  // namespace com

namespace com {
namespace bitcoin {
namespace proto3 {

namespace protobuf_PaymentAckV3_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_PaymentAckV3_2eproto

// ===================================================================

class PaymentAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.bitcoin.proto3.PaymentAck) */ {
 public:
  PaymentAck();
  virtual ~PaymentAck();

  PaymentAck(const PaymentAck& from);

  inline PaymentAck& operator=(const PaymentAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PaymentAck(PaymentAck&& from) noexcept
    : PaymentAck() {
    *this = ::std::move(from);
  }

  inline PaymentAck& operator=(PaymentAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PaymentAck& default_instance();

  static inline const PaymentAck* internal_default_instance() {
    return reinterpret_cast<const PaymentAck*>(
               &_PaymentAck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PaymentAck* other);
  friend void swap(PaymentAck& a, PaymentAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PaymentAck* New() const PROTOBUF_FINAL { return New(NULL); }

  PaymentAck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PaymentAck& from);
  void MergeFrom(const PaymentAck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PaymentAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string memo = 2;
  void clear_memo();
  static const int kMemoFieldNumber = 2;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // .com.bitcoin.proto3.Payment payment = 1;
  bool has_payment() const;
  void clear_payment();
  static const int kPaymentFieldNumber = 1;
  const ::com::bitcoin::proto3::Payment& payment() const;
  ::com::bitcoin::proto3::Payment* mutable_payment();
  ::com::bitcoin::proto3::Payment* release_payment();
  void set_allocated_payment(::com::bitcoin::proto3::Payment* payment);

  // uint64 responseTime = 4;
  void clear_responsetime();
  static const int kResponseTimeFieldNumber = 4;
  ::google::protobuf::uint64 responsetime() const;
  void set_responsetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.bitcoin.proto3.PaymentAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::com::bitcoin::proto3::Payment* payment_;
  ::google::protobuf::uint64 responsetime_;
  mutable int _cached_size_;
  friend struct protobuf_PaymentAckV3_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PaymentAck

// .com.bitcoin.proto3.Payment payment = 1;
inline bool PaymentAck::has_payment() const {
  return this != internal_default_instance() && payment_ != NULL;
}
inline void PaymentAck::clear_payment() {
  if (GetArenaNoVirtual() == NULL && payment_ != NULL) delete payment_;
  payment_ = NULL;
}
inline const ::com::bitcoin::proto3::Payment& PaymentAck::payment() const {
  const ::com::bitcoin::proto3::Payment* p = payment_;
  // @@protoc_insertion_point(field_get:com.bitcoin.proto3.PaymentAck.payment)
  return p != NULL ? *p : *reinterpret_cast<const ::com::bitcoin::proto3::Payment*>(
      &::com::bitcoin::proto3::_Payment_default_instance_);
}
inline ::com::bitcoin::proto3::Payment* PaymentAck::mutable_payment() {
  
  if (payment_ == NULL) {
    payment_ = new ::com::bitcoin::proto3::Payment;
  }
  // @@protoc_insertion_point(field_mutable:com.bitcoin.proto3.PaymentAck.payment)
  return payment_;
}
inline ::com::bitcoin::proto3::Payment* PaymentAck::release_payment() {
  // @@protoc_insertion_point(field_release:com.bitcoin.proto3.PaymentAck.payment)
  
  ::com::bitcoin::proto3::Payment* temp = payment_;
  payment_ = NULL;
  return temp;
}
inline void PaymentAck::set_allocated_payment(::com::bitcoin::proto3::Payment* payment) {
  delete payment_;
  payment_ = payment;
  if (payment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.bitcoin.proto3.PaymentAck.payment)
}

// string memo = 2;
inline void PaymentAck::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PaymentAck::memo() const {
  // @@protoc_insertion_point(field_get:com.bitcoin.proto3.PaymentAck.memo)
  return memo_.GetNoArena();
}
inline void PaymentAck::set_memo(const ::std::string& value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.bitcoin.proto3.PaymentAck.memo)
}
#if LANG_CXX11
inline void PaymentAck::set_memo(::std::string&& value) {
  
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.bitcoin.proto3.PaymentAck.memo)
}
#endif
inline void PaymentAck::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.bitcoin.proto3.PaymentAck.memo)
}
inline void PaymentAck::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.bitcoin.proto3.PaymentAck.memo)
}
inline ::std::string* PaymentAck::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:com.bitcoin.proto3.PaymentAck.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PaymentAck::release_memo() {
  // @@protoc_insertion_point(field_release:com.bitcoin.proto3.PaymentAck.memo)
  
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentAck::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:com.bitcoin.proto3.PaymentAck.memo)
}

// uint64 responseTime = 4;
inline void PaymentAck::clear_responsetime() {
  responsetime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PaymentAck::responsetime() const {
  // @@protoc_insertion_point(field_get:com.bitcoin.proto3.PaymentAck.responseTime)
  return responsetime_;
}
inline void PaymentAck::set_responsetime(::google::protobuf::uint64 value) {
  
  responsetime_ = value;
  // @@protoc_insertion_point(field_set:com.bitcoin.proto3.PaymentAck.responseTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto3
}  // namespace bitcoin
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PaymentAckV3_2eproto__INCLUDED
