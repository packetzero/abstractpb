// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Payment.proto

#ifndef PROTOBUF_Payment_2eproto__INCLUDED
#define PROTOBUF_Payment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Output.pb.h"
// @@protoc_insertion_point(includes)
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Payment;
class PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;

namespace protobuf_Payment_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Payment_2eproto

// ===================================================================

class Payment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Payment) */ {
 public:
  Payment();
  virtual ~Payment();

  Payment(const Payment& from);

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Payment& default_instance();

  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Payment* other);

  // implements Message ----------------------------------------------

  inline Payment* New() const PROTOBUF_FINAL { return New(NULL); }

  Payment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Payment& from);
  void MergeFrom(const Payment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Payment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes transactions = 2;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 2;
  const ::std::string& transactions(int index) const;
  ::std::string* mutable_transactions(int index);
  void set_transactions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_transactions(int index, ::std::string&& value);
  #endif
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const void* value, size_t size);
  ::std::string* add_transactions();
  void add_transactions(const ::std::string& value);
  #if LANG_CXX11
  void add_transactions(::std::string&& value);
  #endif
  void add_transactions(const char* value);
  void add_transactions(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& transactions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transactions();

  // repeated .Output refund_to = 3;
  int refund_to_size() const;
  void clear_refund_to();
  static const int kRefundToFieldNumber = 3;
  const ::Output& refund_to(int index) const;
  ::Output* mutable_refund_to(int index);
  ::Output* add_refund_to();
  ::google::protobuf::RepeatedPtrField< ::Output >*
      mutable_refund_to();
  const ::google::protobuf::RepeatedPtrField< ::Output >&
      refund_to() const;

  // optional bytes merchant_data = 1;
  bool has_merchant_data() const;
  void clear_merchant_data();
  static const int kMerchantDataFieldNumber = 1;
  const ::std::string& merchant_data() const;
  void set_merchant_data(const ::std::string& value);
  #if LANG_CXX11
  void set_merchant_data(::std::string&& value);
  #endif
  void set_merchant_data(const char* value);
  void set_merchant_data(const void* value, size_t size);
  ::std::string* mutable_merchant_data();
  ::std::string* release_merchant_data();
  void set_allocated_merchant_data(::std::string* merchant_data);

  // optional string memo = 4;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 4;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // @@protoc_insertion_point(class_scope:Payment)
 private:
  void set_has_merchant_data();
  void clear_has_merchant_data();
  void set_has_memo();
  void clear_has_memo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transactions_;
  ::google::protobuf::RepeatedPtrField< ::Output > refund_to_;
  ::google::protobuf::internal::ArenaStringPtr merchant_data_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  friend struct protobuf_Payment_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Payment

// optional bytes merchant_data = 1;
inline bool Payment::has_merchant_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Payment::set_has_merchant_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Payment::clear_has_merchant_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Payment::clear_merchant_data() {
  merchant_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merchant_data();
}
inline const ::std::string& Payment::merchant_data() const {
  // @@protoc_insertion_point(field_get:Payment.merchant_data)
  return merchant_data_.GetNoArena();
}
inline void Payment::set_merchant_data(const ::std::string& value) {
  set_has_merchant_data();
  merchant_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Payment.merchant_data)
}
#if LANG_CXX11
inline void Payment::set_merchant_data(::std::string&& value) {
  set_has_merchant_data();
  merchant_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Payment.merchant_data)
}
#endif
inline void Payment::set_merchant_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_merchant_data();
  merchant_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Payment.merchant_data)
}
inline void Payment::set_merchant_data(const void* value, size_t size) {
  set_has_merchant_data();
  merchant_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Payment.merchant_data)
}
inline ::std::string* Payment::mutable_merchant_data() {
  set_has_merchant_data();
  // @@protoc_insertion_point(field_mutable:Payment.merchant_data)
  return merchant_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Payment::release_merchant_data() {
  // @@protoc_insertion_point(field_release:Payment.merchant_data)
  clear_has_merchant_data();
  return merchant_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Payment::set_allocated_merchant_data(::std::string* merchant_data) {
  if (merchant_data != NULL) {
    set_has_merchant_data();
  } else {
    clear_has_merchant_data();
  }
  merchant_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merchant_data);
  // @@protoc_insertion_point(field_set_allocated:Payment.merchant_data)
}

// repeated bytes transactions = 2;
inline int Payment::transactions_size() const {
  return transactions_.size();
}
inline void Payment::clear_transactions() {
  transactions_.Clear();
}
inline const ::std::string& Payment::transactions(int index) const {
  // @@protoc_insertion_point(field_get:Payment.transactions)
  return transactions_.Get(index);
}
inline ::std::string* Payment::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:Payment.transactions)
  return transactions_.Mutable(index);
}
inline void Payment::set_transactions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Payment.transactions)
  transactions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Payment::set_transactions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Payment.transactions)
  transactions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Payment::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Payment.transactions)
}
inline void Payment::set_transactions(int index, const void* value, size_t size) {
  transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Payment.transactions)
}
inline ::std::string* Payment::add_transactions() {
  // @@protoc_insertion_point(field_add_mutable:Payment.transactions)
  return transactions_.Add();
}
inline void Payment::add_transactions(const ::std::string& value) {
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Payment.transactions)
}
#if LANG_CXX11
inline void Payment::add_transactions(::std::string&& value) {
  transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Payment.transactions)
}
#endif
inline void Payment::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Payment.transactions)
}
inline void Payment::add_transactions(const void* value, size_t size) {
  transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Payment.transactions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Payment::transactions() const {
  // @@protoc_insertion_point(field_list:Payment.transactions)
  return transactions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Payment::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:Payment.transactions)
  return &transactions_;
}

// repeated .Output refund_to = 3;
inline int Payment::refund_to_size() const {
  return refund_to_.size();
}
inline void Payment::clear_refund_to() {
  refund_to_.Clear();
}
inline const ::Output& Payment::refund_to(int index) const {
  // @@protoc_insertion_point(field_get:Payment.refund_to)
  return refund_to_.Get(index);
}
inline ::Output* Payment::mutable_refund_to(int index) {
  // @@protoc_insertion_point(field_mutable:Payment.refund_to)
  return refund_to_.Mutable(index);
}
inline ::Output* Payment::add_refund_to() {
  // @@protoc_insertion_point(field_add:Payment.refund_to)
  return refund_to_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Output >*
Payment::mutable_refund_to() {
  // @@protoc_insertion_point(field_mutable_list:Payment.refund_to)
  return &refund_to_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Output >&
Payment::refund_to() const {
  // @@protoc_insertion_point(field_list:Payment.refund_to)
  return refund_to_;
}

// optional string memo = 4;
inline bool Payment::has_memo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Payment::set_has_memo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Payment::clear_has_memo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Payment::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memo();
}
inline const ::std::string& Payment::memo() const {
  // @@protoc_insertion_point(field_get:Payment.memo)
  return memo_.GetNoArena();
}
inline void Payment::set_memo(const ::std::string& value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Payment.memo)
}
#if LANG_CXX11
inline void Payment::set_memo(::std::string&& value) {
  set_has_memo();
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Payment.memo)
}
#endif
inline void Payment::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Payment.memo)
}
inline void Payment::set_memo(const char* value, size_t size) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Payment.memo)
}
inline ::std::string* Payment::mutable_memo() {
  set_has_memo();
  // @@protoc_insertion_point(field_mutable:Payment.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Payment::release_memo() {
  // @@protoc_insertion_point(field_release:Payment.memo)
  clear_has_memo();
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Payment::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    set_has_memo();
  } else {
    clear_has_memo();
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:Payment.memo)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Payment_2eproto__INCLUDED
